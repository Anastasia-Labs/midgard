services:
  midgard-node:
    build:
      context: .
      additional_contexts:
        - sdk=../midgard-sdk
      dockerfile: ./Dockerfile
    env_file:
      - .env
    command:
      - node
      - ./dist/index.js
      - listen
    ports:
      - "3000:3000" # api server
      - "9464:9464" # prometheus exporter
      # - "4318:4318" # opentelemetry
    volumes:
      - ./db:/app/db
    networks:
      midgard_net:
    # restart: always
  
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    networks:
      midgard_net:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    command:
      - "postgres"
      - "-c"
      - "max_connections=100"
      - "-c"
      - "shared_buffers=128MB"
      - "-c"
      - "effective_cache_size=512MB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=128MB"
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    user: root
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      midgard_net:
        

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    hostname: cadvisor
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
    networks:
      midgard_net:

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - DS_PROMETHEUS=prometheus
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor metricsSummary
    volumes:
      - "grafana-data:/var/lib/grafana"
      - "./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml"
      - "./grafana/dashboard.json:/var/lib/grafana/dashboards/dashboard.json"
      - "./grafana/default.yaml:/etc/grafana/provisioning/dashboards/default.yaml"
    depends_on:
      - prometheus
    networks:
      midgard_net:
  tempo-init:
    image: grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo
    networks:
      midgard_net:

  tempo:
    image: grafana/tempo:latest
    command: [-config.file=/etc/tempo.yaml]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - tempo-data:/var/tempo
    ports:
      - "14268:14268"    # jaeger ingest
      - "3200:3200"    # tempo
      - "9095:9095"    # tempo grpc
      - "4317:4317"    # otlp grpc
      - "4318:4318"    # otlp http
      - "9411:9411"    # zipkin
    depends_on:
      - tempo-init
    networks:
      midgard_net:

networks:
  midgard_net:
  
volumes:
  postgres-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  tempo-data:
    driver: local
